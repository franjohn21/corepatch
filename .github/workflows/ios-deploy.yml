name: Deploy to TestFlight

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - preview
          - production
      version:
        description: 'Version number (e.g., 1.0.0) - required for production'
        required: false
        type: string
      release_notes:
        description: 'Release notes for TestFlight - required for production'
        required: false
        type: string

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  deploy:
    name: Deploy to TestFlight
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "ENVIRONMENT=preview" >> $GITHUB_OUTPUT
          echo "VERSION=1.0.0-pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES=Preview build for PR #${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "EXTERNAL_TESTING=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES=Production release $VERSION" >> $GITHUB_OUTPUT
          echo "EXTERNAL_TESTING=true" >> $GITHUB_OUTPUT
        else
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "VERSION=${{ github.event.inputs.version || '1.0.0' }}" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES=${{ github.event.inputs.release_notes || 'Manual deployment' }}" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "EXTERNAL_TESTING=true" >> $GITHUB_OUTPUT
          else
            echo "EXTERNAL_TESTING=false" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Validate production inputs
      if: steps.env.outputs.ENVIRONMENT == 'production' && github.event_name == 'workflow_dispatch'
      run: |
        if [[ -z "${{ github.event.inputs.version }}" ]]; then
          echo "❌ Version is required for production deployments"
          exit 1
        fi
        if [[ -z "${{ github.event.inputs.release_notes }}" ]]; then
          echo "❌ Release notes are required for production deployments"
          exit 1
        fi
        
    - name: Install Apple certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}
        
    - name: Setup App Store Connect API
      run: |
        # Create API key file for App Store Connect
        mkdir -p ~/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_KEY_CONTENT }}" > ~/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_KEY_ID }}.p8
        
    - name: Set build number
      run: |
        agvtool new-version -all ${{ github.run_number }}
        
    - name: Set version number
      run: |
        agvtool new-marketing-version "${{ steps.env.outputs.VERSION }}"
        
    - name: Build app
      run: |
        xcodebuild -project CorePatch.xcodeproj \
          -scheme CorePatch \
          -configuration Release \
          -archivePath "build/CorePatch-${{ steps.env.outputs.ENVIRONMENT }}.xcarchive" \
          archive
          
    - name: Export IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath "build/CorePatch-${{ steps.env.outputs.ENVIRONMENT }}.xcarchive" \
          -exportPath build/ \
          -exportOptionsPlist .github/workflows/ExportOptions.plist
          
    - name: Upload to TestFlight
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file build/CorePatch.ipa \
          --username ${{ secrets.APPLE_ID }} \
          --password ${{ secrets.APP_SPECIFIC_PASSWORD }}
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: corepatch-${{ steps.env.outputs.ENVIRONMENT }}-${{ github.run_number }}
        path: build/CorePatch.ipa
        retention-days: ${{ steps.env.outputs.ENVIRONMENT == 'production' && 30 || 7 }}
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Preview build deployed to TestFlight**
            
            **Environment:** Preview
            **Version:** ${{ steps.env.outputs.VERSION }}
            **Build:** ${{ github.run_number }}
            
            The build will be available for internal testing shortly.`
          })
          
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.env.outputs.VERSION }}
        body: |
          ## CorePatch ${{ steps.env.outputs.VERSION }}
          
          **Environment:** Production
          **Build Number:** ${{ github.run_number }}
          **Release Notes:** ${{ steps.env.outputs.RELEASE_NOTES }}
          
          The app has been submitted to TestFlight and will be available for external testing shortly.
        draft: false
        prerelease: false
        
    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ steps.env.outputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.env.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**External Testing:** ${{ steps.env.outputs.EXTERNAL_TESTING }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The app has been uploaded to TestFlight and will be available shortly." >> $GITHUB_STEP_SUMMARY